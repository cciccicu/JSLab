<import name="input-method" src="../../components/InputMethod/InputMethod.ux"></import>
<template>
	<div class="page" style="flex-direction: column;">
		<scroll class="scroll" scroll-y="true" style="position:absolute;top:{{hideTopbar?'20px':'86px;'}}left:0px;height:{{hideTopbar?'460px':'394px;'}};width:100%;flex-direction: column;padding: 0px 6px;">
			<text class="code">{{codeShow}}</text>
			<div style="height:240px;"></div>
		</scroll>
		<!-- 第三方输入法组件 -->
		<input-method if="{{!hideInputMethod}}" 
			hide="{{hideInputMethod}}"
			keyboardtype="{{keyboardType}}"
			maxlength="{{maxlength}}" 
			vibratemode="{{vibrateMode}}"
			screentype="{{screenType}}"
			@delete="onInputMethodDelete"
			@complete="onInputMethodCompleteSelf" 
		>
		</input-method>
    
    <!-- 光标移动控制区域 -->
	<div if="{{showCursorControls}}" class="cursormove">
      <img src="/common/images/up.png" class="cursor-btn" @click="move('up')"></img>
      <img src="/common/images/left.png" class="cursor-btn" @click="move('left')"></img>
      <img src="/common/images/right.png" class="cursor-btn" @click="move('right')"></img>
      <img src="/common/images/down.png" class="cursor-btn" @click="move('down')"></img>
    </div>

		<!-- 底部工具栏 -->
	<img if="{{!hideToolbar}}" class="btn" src="/common/images/save.png"
      style="left: 6px;top: 402px;" @click="savecode" />
    <img if="{{!hideToolbar}}" class="btn" src="/common/images/run.png"
      style="left: 90px;top: 402px;" @click="runcode" />
    <img if="{{!hideToolbar}}" class="btn" src="/common/images/move.png"
      style="left: 174px;top: 402px;" @click="changeMoveCursor" />
    <img if="{{!hideToolbar}}" class="btn" src="/common/images/edit.png"
      style="left: 258px;top: 402px;" @click="changeKeybord" />

	<!-- 顶栏 -->
	<img static src="/common/images/hd.png"
		class="topbar-bg" />
	<img static class="btn" src="/common/images/back.png" @click="back"
		style="left: 6px;top: 6px;" />
	<img static class="btn" src="/common/images/more.png" @click="routerTo('more')"
		style="left: 258px;top: 6px;" />
	<img static if="{{!hideInputMethod}}" class="btn" src="/common/images/down.png" @click="changeKeybord"
		style="left: 258px;top: 6px;" />
	<text class="time-text">{{nowTime}}</text>
	<text class="title-text">编辑JS</text>

	</div>
</template>

<script>
import router from '@system.router';
import app from '@system.app';
import prompt from '@system.prompt';

export default {
	private: {
		nowTime: "00:00",
		timer: null,
		hideToolbar: false,
		codeShow: "",
		showCursorControls: false,
		hideInputMethod: true,
		keyboardType: "QWERTY",
		maxlength: 5,
		vibrateMode: "short",
		screenType: "rect",
	},

	onInit() {
		this.updateTime();
		this.timer = setInterval(() => {
			this.updateTime();
		}, 1000);
		this.updateCodeDisplay();
	},
	onDestroy() {
		if (this.timer) {
			clearInterval(this.timer);
		}
	},
	onShow() {
		this.updateCodeDisplay();
	},
	routerTo(page) {
		router.push({
			uri: `/pages/${page}`
		});
	},
	back() {
		router.back();
	},
    changeKeybord() {
		this.hideInputMethod = !this.hideInputMethod;
    	this.hideToolbar = !this.hideInputMethod;
		if(this.showCursorControls) {
			this.showCursorControls = false;
		}
	},
    changeMoveCursor() {
		this.showCursorControls = !this.showCursorControls;
	},
	onInputMethodDelete() {
		this.del();
	},
	onInputMethodCompleteSelf(evt) {
		if (evt && evt.detail && evt.detail.content) {
			this.add(evt.detail.content);
		}
	},
	updateCodeDisplay() {
		this.codeShow = this.$app.$def.codeBefore + "┃" + this.$app.$def.codeAfter;
		this.$app.$def.jsCode = this.$app.$def.codeBefore + this.$app.$def.codeAfter;
	},
	add(str) {
		this.$app.$def.codeBefore += str;
		this.updateCodeDisplay();
	},
	del() {
		if (this.$app.$def.codeBefore.length > 0) {
			this.$app.$def.codeBefore = this.$app.$def.codeBefore.slice(0, -1);
			this.updateCodeDisplay();
		}
	},
	move(direction) {
		switch (direction) {
			case "left":
				if (this.$app.$def.codeBefore.length > 0) {
					const charToMove = this.$app.$def.codeBefore.slice(-1);
					this.$app.$def.codeBefore = this.$app.$def.codeBefore.slice(0, -1);
					this.$app.$def.codeAfter = charToMove + this.$app.$def.codeAfter;
					this.updateCodeDisplay();
				}
				break;
			case "right":
				if (this.$app.$def.codeAfter.length > 0) {
					const charToMove = this.$app.$def.codeAfter.charAt(0);
					this.$app.$def.codeAfter = this.$app.$def.codeAfter.slice(1);
					this.$app.$def.codeBefore += charToMove;
					this.updateCodeDisplay();
				}
				break;
			case "up":
				this.moveVertical(-1);
				break;
			case "down":
				this.moveVertical(1);
				break;
		}
	},
	moveVertical(direction) {
		const allText = this.$app.$def.codeBefore + this.$app.$def.codeAfter;
		const lines = allText.split('\n');
		if (lines.length <= 1) return;
		const beforeLines = this.$app.$def.codeBefore.split('\n');
		const currentLineIndex = beforeLines.length - 1;
		const currentColumnIndex = beforeLines[currentLineIndex].length;
		const targetLineIndex = currentLineIndex + direction;

		if (targetLineIndex < 0 || targetLineIndex >= lines.length) {
			return;
		}

		const targetLine = lines[targetLineIndex];
		const targetColumnIndex = Math.min(currentColumnIndex, targetLine.length);

		let newCodeBefore = "";
		let newCodeAfter = "";

		for (let i = 0; i < targetLineIndex; i++) {
			newCodeBefore += lines[i] + '\n';
		}
		newCodeBefore += targetLine.substring(0, targetColumnIndex);

		newCodeAfter = targetLine.substring(targetColumnIndex);
		for (let i = targetLineIndex + 1; i < lines.length; i++) {
			newCodeAfter += '\n' + lines[i];
		}

		this.$app.$def.codeBefore = newCodeBefore;
		this.$app.$def.codeAfter = newCodeAfter;
		this.updateCodeDisplay();
	},
	savecode() {
    	this.$app.$def.savejs(this.$app.$def.jsName, this.$app.$def.jsCode);
    	prompt.showToast({"message":"代码已保存"})
	},
	runcode() {
		this.$app.$def.jsCode = this.$app.$def.codeBefore + this.$app.$def.codeAfter;
		router.push({
			uri: '/pages/run'
		});
	},
	updateTime() {
		const date = new Date();
		let hours = date.getHours();
		let minutes = date.getMinutes();

		hours = hours < 10 ? '0' + hours : hours;
		minutes = minutes < 10 ? '0' + minutes : minutes;

		this.nowTime = `${hours}:${minutes}`;
	},
	exit() {
		app.terminate();
	},
};
</script>

<style>
	.page {
		width: 336px;
		height: 480px;
		background-color: #000000;
		position: relative; 
	}

  	.code {
    	color: #ffffff;
		font-size:20px;
  	}

	.btn {
		position: absolute;
		width: 72px;
		height: 72px;
	}

	.topbar-bg {
		position: absolute;
		left: 0px;
		top: 0px;
		width: 336px;
		height: 102px;
	}

	.time-text {
		position: absolute;
		left: 78px;
		top: 7px;
		width: 180px;
		line-height: 32px;
		font-weight: bold;
		font-size: 24px;
		color: rgba(255,255,255,0.6);
		text-align: center;
	}

	.title-text {
		position: absolute;
		left: 78px;
		top: 35px;
		width: 180px;
		line-height: 42px;
		font-weight: bold;
		font-size: 32px;
		color: white;
		text-align: center;
	}

	.cursormove {
		position: absolute;
		left: 6px;
		top: 300px;
		width: 324px;
		height: 90px;
		border-radius: 36px;
		background-color: #333;
		flex-direction: row;
		justify-content: space-around;
		align-items: center;
	}

	.cursor-btn {
		width: 72px;
		height: 72px;
	}
</style>
