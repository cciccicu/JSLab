<template>
  <div class="page" style="flex-direction: column;">
  
    <img if="{{fileList.length == 0}}" src="/common/images/empty.png" class="empty-img" />
    <text if="{{fileList.length == 0}}" class="empty-text">啥也没有</text>
  
    <list bounces="true" class="list">
      <list-item for="{{(index, file) in fileList}}" class="item {{selectedFileIndex === index ? 'item2' : ''}}"
        @click="selectFile(index)" type="nook">
        <text class="itemtext">{{file.name}}</text>
        <div class="itemtext" style="justify-content: space-between;width: 100%;">
          <text class="itemtext2" style="flex:1">文件大小</text>
          <text class="itemtext2">{{file.size}}B</text>
        </div>
      </list-item>
    </list>
  
    <img static src="/common/images/hd.png" class="header-img" />
    <img static src="/common/images/back.png" class="btn" style="left: 6px;top: 6px;" @click="exit" />
    <img static src="/common/images/more.png" class="btn" style="left: 258px;top: 6px;" @click="routerTo('setting')" />
    <text class="time-text">{{nowTime}}</text>
    <text class="title-text">JSLab</text>
  
    <!-- 底部按钮根据选择状态显示 -->
    <img if="{{selectedFileIndex === -1}}" src="/common/images/market.png" style="left: 6px;top: 402px;" class="btn" @click="routerTo('market')"/>
    <img if="{{selectedFileIndex === -1}}" src="/common/images/add.png" style="left: 258px;top: 402px;" class="btn" @click="routerTo('add')"/>
    <img if="{{selectedFileIndex !== -1}}" src="/common/images/run.png" style="left: 6px;top: 402px;" class="btn" @click="runcode"/>
    <img if="{{selectedFileIndex !== -1}}" src="/common/images/edit.png" style="left: 132px;top: 402px;" class="btn" @click="editcode"/>
    <img if="{{selectedFileIndex !== -1}}" src="/common/images/delete.png" style="left: 258px;top: 402px;" class="btn" @click="handleDeleteClick"/>
  
  </div>
</template>

<script>
import router from '@system.router';
import app from '@system.app';
import prompt from '@system.prompt';
import vibrator from '@system.vibrator';

export default {
  private: {
    fileList: [],
    selectedFileIndex: -1,
    nowTime: "00:00",
    timer: null,

    // 简化删除逻辑
    deleteClickCount: 0,
    deleteTimer: null
  },

  exit() {
    vibrator.vibrate({
      mode: 'short'
    });
    app.terminate();
  },

  updateTime() {
    const date = new Date();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    this.nowTime = `${hours}:${minutes}`;
  },

  onInit() {
    this.updateTime();
    this.timer = setInterval(() => {
      this.updateTime();
    }, 1000);
  },

  onDestroy() {
    clearInterval(this.timer);
    if (this.deleteTimer) {
      clearTimeout(this.deleteTimer);
    }
  },

  onShow() {
    this.loadFileList();
  },

  loadFileList() {
    this.$app.$def.listjs().then(fileList => {
      this.fileList = fileList;
      this.selectedFileIndex = -1;
      // 重置删除状态（文件列表刷新后不应保留旧操作）
      this.resetDeleteClick();
    }).catch(error => {
      console.error("获取文件列表失败:", error);
      prompt.showToast({ message: "获取文件列表失败" });
    });
  },

  selectFile(index) {
    vibrator.vibrate({
      mode: 'short'
    });
    if (this.selectedFileIndex === index) {
      this.selectedFileIndex = -1;
    } else {
      this.selectedFileIndex = index;
    }
    // 切换选择时重置删除计数，防止误删
    this.resetDeleteClick();
  },

  routerTo(page) {
    vibrator.vibrate({
      mode: 'short'
    });
    router.push({ uri: `/pages/${page}` });
  },

  runcode() {
    // 在这里直接使用震动API
    vibrator.vibrate({
      mode: 'short'
    });
    
    if (this.selectedFileIndex === -1 || !this.fileList[this.selectedFileIndex]) {
      prompt.showToast({ message: "请先选择一个文件" });
      return;
    }
    const fileName = this.fileList[this.selectedFileIndex].name;
    this.$app.$def.getjs(fileName)
      .then(content => {
        this.$app.$def.jsName = fileName;
        this.$app.$def.jsCode = content;
        // 直接调用router.push，不使用this.routerTo
        router.push({ uri: `/pages/run` });
      })
      .catch(error => {
        console.error(`读取文件 ${fileName} 失败:`, error.message);
        if (error.message.includes('301')) {
          prompt.showToast({ message: `文件 ${fileName} 不存在` });
        } else {
          prompt.showToast({ message: `读取文件失败: ${error.message}` });
        }
      });
  },

  editcode() {
    // 在这里直接使用震动API
    vibrator.vibrate({
      mode: 'short'
    });
    
    if (this.selectedFileIndex === -1 || !this.fileList[this.selectedFileIndex]) {
      prompt.showToast({ message: "请先选择一个文件" });
      return;
    }
    const fileName = this.fileList[this.selectedFileIndex].name;
    this.$app.$def.getjs(fileName)
      .then(content => {
        this.$app.$def.jsName = fileName;
        this.$app.$def.jsCode = content;
        this.$app.$def.codeBefore = content;
        this.$app.$def.codeAfter = "";
        // 直接调用router.push，不使用this.routerTo
        router.push({ uri: `/pages/edit` });
      })
      .catch(error => {
        console.error(`读取文件 ${fileName} 失败:`, error.message);
        if (error.message.includes('301')) {
          prompt.showToast({ message: `文件 ${fileName} 不存在` });
        } else {
          prompt.showToast({ message: `读取文件失败: ${error.message}` });
        }
      });
  },

  handleDeleteClick() {
    // 在这里直接使用震动API
    vibrator.vibrate({
      mode: 'short'
    });
    
    if (this.selectedFileIndex === -1 || !this.fileList[this.selectedFileIndex]) {
      prompt.showToast({ message: "请先选择一个文件" });
      return;
    }

    const fileName = this.fileList[this.selectedFileIndex].name;
    this.deleteClickCount++;

    if (this.deleteClickCount === 1) {
      prompt.showToast({ message: "再点两次确认删除", duration: 500 });
      this.deleteTimer = setTimeout(() => {
        this.resetDeleteClick();
      }, 3000);
    } else if (this.deleteClickCount === 2) {
      prompt.showToast({ message: "再点一次确认删除", duration: 500 });
      // 不重置计时器，沿用第一次的3秒窗口
    } else if (this.deleteClickCount === 3) {
      // 清除定时器并执行删除
      clearTimeout(this.deleteTimer);
      this.deleteTimer = null;

      this.$app.$def.deletejs(fileName)
        .then(() => {
          prompt.showToast({ message: `文件 ${fileName} 已删除`, duration: 500 });
          return this.loadFileList();
        })
        .catch(error => {
          console.error(`删除文件 ${fileName} 失败:`, error.message);
          prompt.showToast({ message: `删除失败: ${error.message}` });
        })
        .finally(() => {
          this.resetDeleteClick();
        });
    } else {
      // 安全兜底：超过3次也重置
      this.resetDeleteClick();
    }
  },

  resetDeleteClick() {
    this.deleteClickCount = 0;
    if (this.deleteTimer) {
      clearTimeout(this.deleteTimer);
      this.deleteTimer = null;
    }
  }
};
</script>

<style>
.page {
  color: white;
  text-align: center;
}

/* 顶部 */
.header-img {
  position: absolute;
  left: 0px;
  top: 0px;
  width: 336px;
  height: 102px;
}

.time-text {
  position: absolute;
  left: 78px;
  top: 7px;
  width: 180px;
  line-height: 32px;
  font-weight: bold;
  font-size: 24px;
  color: rgba(255,255,255,0.6);
  text-align: center;
}

.title-text {
  position: absolute;
  left: 78px;
  top: 35px;
  width: 180px;
  line-height: 42px;
  font-weight: bold;
  font-size: 32px;
  color: white;
  text-align: center;
}

.btn {
  position: absolute;
  width: 72px;
  height: 72px;
}

.list {
  width: 336px;
  height: 480px;
  position: absolute;
  top: 0px;
  left: 0px;
  padding: 86px 6px 86px;
}

.item {
  width: 100%;
  height: 112px;
  padding: 14px 20px;
  margin-bottom: 8px;
  background-color: #262626;
  border-radius: 36px;
  flex-direction: column;
  justify-content: space-between;
}

.item2 {
  background-color: #0D6EFF;
}

.empty-img {
  position: absolute;
  left: 104px;
  top: 146px;
  width: 128px;
  height: 128px;
}

.empty-text {
  position: absolute;
  left: 0px;
  top: 298px;
  width: 336px;
  line-height: 42px;
  font-weight: bold;
  font-size: 32px;
  color: white;
  text-align: center;
}

.itemtext {
  font-size: 32px;
  line-height: 40px;
  width: 100%;
  font-weight: bold;
  color: white;
  text-overflow: ellipsis;
  lines: 1;
}

.itemtext2 {
  font-size: 28px;
  line-height: 37px;
  font-weight: bold;
  color: rgba(255,255,255,0.6);
  text-overflow: ellipsis;
  lines: 1;
}
</style>