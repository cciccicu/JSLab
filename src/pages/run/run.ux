<import name="input-method" src="../../components/InputMethod/InputMethod.ux"></import>

<template>
  <div class="page">
    <!-- 输出控制台 -->
    <scroll bounces="true" class="scroll-container" scroll-y="true">
      <div class="console-card">
        <text class="result-title">console：</text>
        <div class="result-box">
          <text class="result" if="{{!hasError}}">{{result}}</text>
          <text class="error" if="{{hasError}}">{{error}}</text>
          <text class="runtime" if="{{runTime}}">同步运行耗时: {{runTime}} ms</text>
        </div>
      </div>
    </scroll>

    <!-- Prompt 输入区域：仅在需要时渲染 -->
    <text if="{{!hideInputMethod}}" class="prompt-message">{{promptMessage}}</text>
    <text if="{{!hideInputMethod}}" class="input-display">{{inputBuffer}}</text>
    <img if="{{!hideInputMethod}}" class="btn-confirm" src="/common/images/conform.png" @click="onPromptConfirm" />
    <!-- 输入法键盘 -->
  <input-method 
    hide="{{inputMethodHide}}"
    keyboardtype="QWERTY"
    maxlength="5"
    vibratemode="short"
    screentype="rect"
    @complete="onComplete"
    @delete="onDelete"
  >
  </input-method>

    <!-- 顶部工具栏 -->
    <img static src="/common/images/hd.png" class="topbar-bg" />
    <img static src="/common/images/back.png" class="btn" style="left: 6px; top: 6px;" @click="onBack" />
    <img static src="/common/images/rerun.png" class="btn" style="left: 258px; top: 6px;" @click="onRerun" />
    <text class="time-text">{{nowTime}}</text>
    <text class="title-text">运行JS</text>
  </div>
</template>

<script>
  import app from '@system.app';
  import device from '@system.device';
  import router from '@system.router';
  import configuration from '@system.configuration';

  import storage from '@system.storage';
  import file from '@system.file';

  import network from '@system.network';
  import brightness from '@system.brightness';
  import battery from '@system.battery';
  import geolocation from '@system.geolocation';
  import vibrator from '@system.vibrator';
  import event from '@system.event';
  import sensor from '@system.sensor';
  import record from '@system.record';

  import fetch from '@system.fetch';
  import interconnect from '@system.interconnect';
  import uploadtask from '@system.uploadtask';
  import request from '@system.request';
  import prompt from '@system.prompt';


  import crypto from '@system.crypto';
  import audio from '@system.audio';

  export default {
    private: {
      nowTime: "00:00",
      timer: null,
      code: "",
      result: "",
      error: "",
      hasError: false,
      runTime: "",

      // Prompt 状态
      promptResolve: null,
      promptMessage: "",
      inputBuffer: "",          // 手动维护的输入内容
      hideInputMethod: true,    // 控制 prompt 区域是否渲染
      inputMethodHide: true,    // 控制输入法键盘显隐
    },

    onInit() {
      this.updateTime();
      this.timer = setInterval(() => {
        this.updateTime();
      }, 1000);

      this.code = this.$app.$def.jsCode || "console.log(\"Hello, World\");";
      this.runCode();
    },

    onDestroy() {
      if (this.timer) clearInterval(this.timer);
    },

    updateTime() {
      const date = new Date();
      let hours = date.getHours();
      let minutes = date.getMinutes();
      hours = hours < 10 ? '0' + hours : hours;
      minutes = minutes < 10 ? '0' + minutes : minutes;
      this.nowTime = `${hours}:${minutes}`;
    },

    onBack() {
      router.back();
    },

    onRerun() {
      this.runCode();
    },

    exit() {
      app.terminate();
    },

    async runCode() {
      this.result = "";
      this.error = "";
      this.hasError = false;

      if (!this.code.trim()) {
        this.result = "没有代码可执行";
        return;
      }

      if (!this.vconsole) {
        this.vconsole = {
          log: (...args) => {
            const output = args.map(arg => {
              if (typeof arg === 'object') {
                try { return JSON.stringify(arg, null, 2); } 
                catch { return "[object Object]"; }
              }
              return String(arg);
            }).join(' ');
            this.result = (this.result === "代码同步部分执行成功，无同步输出") ? '' : this.result;
            this.result += (this.result ? '\n' : '') + output;
          },
          error: (...args) => {
            const output = args.map(String).join(' ');
            this.result += (this.result ? '\n' : '') + "[ERROR] " + output;
            this.hasError = true;
          }
        };
      }

      const input = (message = "请输入内容") => {
        return new Promise((resolve) => {
          this.promptMessage = String(message);
          this.inputBuffer = ""; // 清空输入缓存
          this.hideInputMethod = false;   // 渲染 prompt 区域
          this.inputMethodHide = false;   // 显示键盘
          this.promptResolve = resolve;
        });
      };

      const exposedModules = {
        app, device, router, configuration,
        storage, file,
        network, brightness, battery, geolocation, vibrator, event, sensor, record,
        fetch, interconnect, uploadtask, request, prompt,
        crypto, audio,
        console: this.vconsole,
        input
      };

      try {
        const userFunction = new Function(...Object.keys(exposedModules), `
          (async () => {
            try {
              ${this.code}
            } catch(e) {
              console.error("用户代码错误: " + e.name + ": " + e.message);
              if(e.stack) console.error(e.stack);
            }
          })()
        `);

        const startTime = Date.now();
        await userFunction(...Object.values(exposedModules));
        const endTime = Date.now();
        this.runTime = endTime - startTime;

        if (!this.result) {
          this.result = "代码同步部分执行成功，无同步输出";
        }
      } catch (e) {
        this.result = "";
        this.error = `${e.name}: ${e.message}`;
        this.hasError = true;
      }
    },

    // 中文选词完成或英文输入完成
    onComplete(e) {
      this.inputBuffer += e.detail.content;
    },


    // 删除最后一个字符
    onDelete() {
      if (this.inputBuffer.length > 0) {
        this.inputBuffer = this.inputBuffer.slice(0, -1);
      }
    },

    // 用户点击确认按钮
    onPromptConfirm() {
      const finalInput = this.inputBuffer;

      // 隐藏区域和键盘
      this.hideInputMethod = true;
      this.inputMethodHide = true;

      if (this.promptResolve) {
        this.promptResolve(finalInput);
        this.promptResolve = null;
      }

      this.inputBuffer = "";
    }
  }
</script>

<style>
.page {
  width: 336px;
  height: 480px;
  background-color: #000000;
  position: relative;
  flex-direction: column;
}

.scroll-container {
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  flex-direction: column;
  padding: 86px 6px 6px;
}

.console-card {
  flex-direction: column;
  padding: 14px 20px;
  margin-bottom: 8px;
  border-radius: 36px;
  background-color: #262626;
}

.result-title {
  color: rgba(255, 255, 255, 0.6);
  font-size: 24px;
  font-weight: bold;
  margin-bottom: 8px;
}

.result-box {
  flex-direction: column;
}

.result {
  color: #9cdcfe;
  font-size: 24px;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.error {
  color: #f48771;
  font-size: 24px;
  white-space: pre-wrap;
  word-wrap: break-word;
}

.runtime {
  color: rgba(200, 200, 200, 0.8);
  font-size: 20px;
  margin-top: 6px;
}


.prompt-message {
  position: absolute;
  bottom: 320px;
  left: 6px;
  color: #ffffff;
  font-size: 24px;
  min-height: 36px;
  background-color: #262626a0;
}

.input-display {
  position: absolute;
  left: 6px;
  bottom: 260px;
  width: 258px;
  color: #9cdcfe;
  font-size: 24px;
  min-height: 60px;
  border-width: 3px;
  border-color: #0d6eff;
  border-radius: 36px;
  background-color: #262626;

}

.btn-confirm {
  position: absolute;
  right: 6px;
  bottom: 260px;
  width: 60px;
  height: 60px;
}

.topbar-bg {
  position: absolute;
  left: 0;
  top: 0;
  width: 336px;
  height: 102px;
}

.btn {
  position: absolute;
  width: 72px;
  height: 72px;
}

.time-text {
  position: absolute;
  left: 78px;
  top: 7px;
  width: 180px;
  line-height: 32px;
  font-weight: bold;
  font-size: 24px;
  color: rgba(255,255,255,0.6);
  text-align: center;
}

.title-text {
  position: absolute;
  left: 78px;
  top: 35px;
  width: 180px;
  line-height: 42px;
  font-weight: bold;
  font-size: 32px;
  color: white;
  text-align: center;
}
</style>