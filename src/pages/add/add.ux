<import name="input-method" src="../../components/InputMethod/InputMethod.ux"></import>
<template>
  <div class="page" style="flex-direction: column;">

    <!-- 顶部背景 -->
    <img static src="/common/images/hd.png" class="header-img" />

    <!-- 顶部按钮 -->
    <img static src="/common/images/back.png" class="btn" style="left: 6px;top: 6px;" @click="back" />
    <img if="{{hideInputMethod}}" static src="/common/images/conform.png" class="btn" style="left: 258px;top: 6px;" @click="confirmAdd" />
    <img if="{{!hideInputMethod}}" static src="/common/images/down.png" class="btn" style="left: 258px;top: 6px;" @click="changeFocus" />

    <!-- 顶部文字 -->
    <text class="time-text">{{nowTime}}</text>
    <text class="title-text">新建JS</text>

    <!-- 文件名输入区域 -->
    <text class="label">文件名:</text>
    <div class="input-container">
      <div class="input-box" @click="changeFocus">
        <text class="input-text">{{fileName + "_" || '请输入文件名'}}</text>
      </div>
    </div>

    <!-- 模板选择区域 -->
    <text class="label">选择模板:</text>
    <div class="picker-container">
      <picker class="picker" 
              type="text"
              selected="{{selectedTemplateIndex}}" 
              range="{{templateOptions}}" 
              @change="onTemplateChange">
      </picker>
    </div>

    <!-- 第三方输入法组件 -->
    <input-method
      hide="{{hideInputMethod}}"
      keyboardtype="{{keyboardType}}"
      maxlength="5"
      vibratemode="{{vibrateMode}}"
      screentype="{{screenType}}"
      @visibility-change="onInputMethodVisibilityChange"
      @key-down="onInputMethodKeyDown"
      @delete="onInputMethodDelete"
      @complete="onInputMethodComplete"
    >
    </input-method>

  </div>
</template>

<script>
import router from '@system.router';
import app from '@system.app';
import prompt from '@system.prompt';
import vibrator from '@system.vibrator';
import device from '@system.device';

export default {
  private: {
    nowTime: "00:00",
    timer: null,
    
    // 输入法相关
    hideInputMethod: true,
    keyboardType: "QWERTY",
    vibrateMode: "short",
    screenType: "rect",
    
    // 文件相关
    fileName: "",
    selectedTemplateIndex: 0,
    templateOptions: ['空白文件', 'Hello World', 'Prompt示例', 'fetch示例'],
    
    // 模板内容
    templateContents: [
      "",
      `console.log("Hello World!");`,
      `prompt.showToast({message:'Hello World'})`,
      `fetch.fetch({
  url: 'https://www.baidu.com',
  responseType: 'text',
  success: function(response) {
    console.log(\`the status code of the response: \${response.code}\`);
    console.log(\`the data of the response: \${response.data}\`);
    console.log(
      \`the headers of the response: \${JSON.stringify(response.headers)}\`
    );
  },
  fail: function(data, code) {
    console.log(\`handling fail, errMsg = \${data}\`);
    console.log(\`handling fail, errCode = \${code}\`);
  }
})
`
    ]
  },
  
  exit(){
      app.terminate();
  },
  
  updateTime() {
    const date = new Date();
    let hours = date.getHours();
    let minutes = date.getMinutes();
    hours = hours < 10 ? '0' + hours : hours;
    minutes = minutes < 10 ? '0' + minutes : minutes;
    this.nowTime = `${hours}:${minutes}`;
  },
  
  onInit() {
    this.updateTime();
    this.timer = setInterval(() => {
      this.updateTime();
    }, 1000);
  },
  
  onDestroy(){
      clearInterval(this.timer);
  },
  
  back(){
      router.back();
  },
  
  changeFocus() {
    this.hideInputMethod = !this.hideInputMethod;
  },
  
  onInputMethodDelete() {
    if (this.fileName.length > 0) {
      this.fileName = this.fileName.slice(0, -1);
    }
  },
  onInputMethodComplete(evt) {
    if (evt && evt.detail && evt.detail.content) {
        this.fileName += evt.detail.content;
    }
  },
  onTemplateChange(e) {
    this.selectedTemplateIndex = e.newSelected;
  },
  confirmAdd() {
    if (!this.fileName || this.fileName.trim() === "") {
      prompt.showToast({
        message: "请输入文件名"
      });
      return;
    }
    let fileName = this.fileName.trim();
    if (!fileName.endsWith('.js')) {
      fileName += '.js';
    }
    const templateContent = this.templateContents[this.selectedTemplateIndex];
    this.$app.$def.savejs(fileName, templateContent)
      .then(() => {
        prompt.showToast({
          message: `文件 ${fileName} 创建成功`
        });
        this.$app.$def.jsName = fileName;
        this.$app.$def.jsCode = templateContent;
        this.$app.$def.codeBefore = templateContent;
        this.$app.$def.codeAfter = "";
        router.push({
          uri: '/pages/edit'
        });
      })
      .catch(error => {
        console.error(`创建文件 ${fileName} 失败:`, error.message);
        prompt.showToast({
          message: `创建文件失败: ${error.message}`
        });
      });
  }
};
</script>

<style>
.page {
  width: 336px;
  height: 480px;
  background-color: #000000;
  flex-direction: column;
  align-items: center;
  padding-top: 120px;
}

/* 顶部 */
.header-img {
  position: absolute;
  left: 0px;
  top: 0px;
  width: 336px;
  height: 102px;
}

.btn {
  position: absolute;
  width: 72px;
  height: 72px;
}

.time-text {
  position: absolute;
  left: 78px;
  top: 7px;
  width: 180px;
  line-height: 32px;
  font-weight: bold;
  font-size: 24px;
  color: rgba(255,255,255,0.6);
  text-align: center;
}

.title-text {
  position: absolute;
  left: 78px;
  top: 35px;
  width: 180px;
  line-height: 42px;
  font-weight: bold;
  font-size: 32px;
  color: white;
  text-align: center;
}

/* 输入框和选择器 */
.input-container {
  width: 300px;
  margin-bottom: 40px;
}

.label {
  font-size: 28px;
  color: rgba(255,255,255,0.8);
  margin-bottom: 10px;
  font-weight: bold;
}

.input-box {
  width: 100%;
  height: 60px;
  background-color: #262626;
  border-radius: 16px;
  padding: 0 20px;
  justify-content: space-between;
  align-items: center;
}

.input-text {
  font-size: 28px;
  color: white;
  flex: 1;
}

.picker-container {
  width: 300px;
  margin-bottom: 40px;
}

.picker {
  width: 100%;
  height: 60px;
  background-color: #262626;
  border-radius: 16px;
  padding: 0 20px;
}

.picker-text {
  font-size: 28px;
  color: white;
}
</style>
